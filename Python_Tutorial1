Jupyter Insights - Jupyter notebook uses .ipynb file format it can be saved a .py file it can be opened with any ide
we cannot double click the .ipynb file it can done via terminal
open juypter notebook in terminal
Then navigate to your notebook
use cd to navigate to terminal before hand

if you are running it locally it will say localhost:8888
if it is AMazon EC2:AAA 
Jupyter notebook can open the mp4 as well

to see the method in jupyter notebook "." and click "tab"


   20  pip install py4j
   21  sudo tar -zxvf spark-3.3.0-bin-hadoop3.tgz
   22  export SPARK_HOME='home/ubuntu/spark-3.3.0-bin-hadoop3'
   23  export PATH=$SPARK_HOME:$PATH
   24  export PYTHONPATH=$SPARK_HOME/python:$PYTHONPATH
   25  export PYSPARK_DRIVER_PYTHON="jupyter"
   26  export PYSPARK_DRIVER_PYTHON_OPTS="notebook"
   27  export PYSPARK_PYTHON=python3
   28  chmod 777 spark-3.3.0-bin-hadoop3
   29  sudo chmod 777 spark-3.3.0-bin-hadoop3
   
/home/karthick/spark-3.3.0-bin-hadoop3

Launch Jupyter Notebook
-----------------------
	As per Jose Portilla
	How to launch jupyter notebook?
		cd spark-3.3.0-bin-hadoop3
		ls
	and type 
		cd Python3
		import pyspark 
	will work here but we are doing a work around that you dont have to get into python directory everytime
		Quit the python3
	enter pip3 install findspark - used to do the connection for us
		ls
	which shows spark
		cd spark-3.3.0-bin-hadoop3
		pwd
	it will give the current directory
	go to home directory
		python3
		import findspark
		findspark.init('spark file path')
		import pyspark it will work even though we are not at working directory
		
		start jupyter notebook
		copy the link and paste it in browser
		import findspark
		findspark.init('spark file path')
		import pyspark it will work

Python has two main number type
int and float
to see what type of object use type()
4%2 = returns the reminder
Order operation in python
	(2+3) * (5+5) bracket taken first
variable assignment
	python prefer snake case name_of_var = 3

Strings 
	single quote or double quote
	we can mix up the double vs single
	
	if we give print("hello")
	display the string - hello
	
	"hello"
	output cell - 'hello' display the string 

format print
	"My name is {}, my number is {}".format('jose', '13'))
	label the variable
	eg: print("First: {x} second: {y}".format('XXX', 'YYY'))
	it will thrown and exception
	print("First: {x} second: {y}".format(x='XXX', y='YYY'))	
	
List
	1. also known as array in other language
	2. use with [1,2,3] or ['A','B','V'] or [1,'a'] it works withany issue
	3. if we want to call object from the list mylist = ['a','b','c'], insight to know if a varible is highlighted then it is a reserved keyword
	   we take the object using indexing 
	   starts from 0,1,2
	   if list is long want to take last letter python support negative indexing [-1] reads from reverse
	4. we can change the value in list by specifying the index position 
		eg: mylist[0] ='New'
			mylist 
	5. To add value to list use .append()
		eg:mylist.append('d')
			mylist 
	6. To nest list 
		eg:mylist[100,200,[300,400]]- be sure about this nest list 
			to get item from nested list indexing position be like mylist[0(100),1(200),(2[0(300),1(400)]))    
			we can access by mylist[2][1] returns values from 2nd nested list 100
			this helps if we are working with matrix 2 dimensional
			
Dict 
	1. also know as Hash Table in other lang
	syntax: d= {'Key' :'Value', 'Key':'Value'}
	2.  it will not be in order like dictonary 
	3. to access d['Key']
	
Boolean 
	1. Retrun True or False
	2. O - False 1 - True which can be used as if condition
	
Tuple 	
	1. like a list but tuple are immutable
	2. syntax:	t=(1,2,3)
	3. make sure items cannot be changed
	
Sets	
	1. like dictonary
	2. unordered collection of unique elements
	3. it there are same elements in sets it will reduce the elements
		eg:{1,1,2,2} it returns {1,2}

Comparision operation
	>, >=, <=, ==(quality), 'a' =='a', 1!=2, 

Logic operation
	(1==1) and ('a'='a') paranthesis are optional to check 2 conditions other languages &&
	(1==1) or ('a'='a') ||
	
if elif and else
	if 1==1:
		print()
	elif:3==3:
		print()	
	else:
		print()

seq = [1,2,3]
	for item in seq:
		print(item) or print(item+item)
		
while
	i=1
	while(i<1):
		print("i"{}.format(i))
		i = i+1		

Range 
	to create list of integers
	range(5) it gives us range(0,5) generator
	cast it to list - list(range(5))  - it prints the list of integers [0,1,2,3,4]
		
	range(start, stop, step)
	commonly used in for loop
	
List comprehension 
	useful to build a list
	x=[1,2,3,4]
	out=[]
	for num in x:
		out.append(num**2)
		
	print(out)
	
	Convert the for loop as list comprehension
	[num**2 for num in x] 	- this other of writing for loop by flatening it out as list comprehension and it retruns result in LIST
	
	if find appending operation then use the list comprehension to flatten the loop, faster, performance booster

Function and special methods used on python objects
	to create custom function use 
	syntax: def function_name():
		print("hello")
		function_name if we call like this then it will retrun <function _main_.function_name>
		function_name()

		to add parameter to function
		def function_name(name):
			print("hello", +name)
			
		function_name(Karthick) -> it concadinates the parameter with provided in print statment
	
		to add default parameter to a function
		def function_name(name='No_Name'):
			print("hello", +name)
			
		function_name() -> it concadinates the parameter with provided in print statment
		
		if we want to have Documention string in a function it can be done using
		def function_name(name='No_Name'):
			print("hello", +name)
		'''
		This prints out the user name!
		
		'''
		function_name()
		whenever we give Shift+Tab the displays the document about the function
		
		
		To save value to a variable using function
		def square(x):
			return x**2
			print(square(2))
		result = square(2) -> it prints 4 -> type(result) is int -> return statement will retrun the value as out in jupyter
		if we print it doesnt store to an variable it just printed the value it doesnt return 

Lambda Expression
	Quick type anonymous function, write the function and it can be called one time as no name assigned to it
	
	syntax: lambda input: output*2 -> 
		
		instead of writing it in traditional function 
		
	regular	def times_two(var):
			retrun var*10
			
		times_two(20) = 200 
		 
Methods on Strings
	String = 'hello'
	.lower()
	.upper()
	.split() - splits the string based on white space and return it as list of string
		tweet ="hello $Thomson"
		tweet.split()
			['hello', '$Thomson']
		we can do that with symbols as well or if symbols at the end of string we do it as mentioned below
		tweet.split('~')[-1]

		
How to retain value from dictionaries	
	syntax: dict = {'Key1': 'Value1', 'Key2', 'Value2')
	dict.keys() - will return all keys
	dict.items() - will return all items
		it has no orders
		
Pop something inside the list or find 
	mylist = [1,2,3]
	last_value = mylist.pop()
	remove based on index - first = mylist.pop(0)
	check item inside list x in [1,2,3] false or 1 in [1,2,3] true	
	
	
	
FUNCTIONS
---------
	def name_of_function(): #all lower case words, underscore between the words
		'''
		DocString
		'''
	
	Parameters in function
	----------------------
	def name_of_function(name):	
	
		print("hello",+name)
		
	Return in function
	------------------
	def name_of_function(name1, name2):
		return num1+num2
		
		retrun all to "save the value" to variable but "will not print"
		
	Calling function with or without parenthisis
	--------------------------------------------
		say_hello()
		say_hello -  will say it is a function
		
		def say_hello_buddy(name):
		    print(f' hello  {name}')		
		say_hello_buddy('Karthick')
		
		Default function value
		-----------------------

		def say_hello_buddy(name = 'Default'):
		    print(f' hello  {name}')		
		say_hello_buddy('Karthick')
		
		giving parameter while we call function will no cause error instead it will retrun default value
		 

		def add_num_return(num1,num2):
		    #print (num1+num2)
    			return num1+num2
    			result = add_num_return(5,5)
			result
		
		def say_hello_buddy(name):
    			print(f' hello  {name}')
    		
    		def even_in_list(given_list):
    		for every in given_list:
        		if every % 2 == 0:
            			return True
        		else:
            			pass
            		#return False #it is wrong it will check the first num and come out
            		#solution it should be outside for loop
    		return False		
    		
    		#retrun all even numbers in llist
		def even_in_list(given_list):
    		#place holder for retruning something or variable, if dont have to find it is as argument
    		even_number = []
    
    		for every in given_list:
        		if every % 2 == 0:
            			even_number.append(every)
        		else:
            			pass
            		#return False #it is wrong declaration inside a loop it will check the first num and come out
            		#solution it should be outside for loop
    		return even_number
    		
    		
Function that upacking TUPLE
-----------------------------
    	
    	upacking tuple using function
    	
    	stock_prices = [("Apple", 200),("Google", 300),("MSFT", 400)]
    	for price in stock_prices:
    		print(price)
    	for ticker, price in stock_prices:
    		print(price + (price*0.1))	
    	
    	Now how we can do this using function find employee who works more hours in the month
    	work_hours =[('abby', 100),('Bill', 400),('Cassie', 800)]
    	
    	def employ_check(work_hours):
    	
    	
    	current_max = hours
  	employee_month = employee
    	
    	for employee, hours in work_hours:
    		if hours > current_max:
    		 	
    			current_max = hours
    			employee_month = employee
    		else:
    			pass
    	return (employ_month, current_max)			
    			
    			
    	result = employe_check(work_hours)
    	
    	
Interaction between functions
-----------------------------
	mimic carnival guessing game, three cups with a red ball hidden and guess where it is 
	
	it will done with python list
	
	
		
	from random import shuffle
	shuffle(mylist)
		# this will shuffle the list
		
	
	#tumbler 
	mylist = ['','0','']
	
	def shuffle_list(mylist):
		shuffle(mylist)
		return mylist
		
	result = shuffle_list(mylist)	
	
	def player_guess():
	
		guess = ''
		
		while guess not in ['0','1','2']
			guess =  Input('Guess from the given position 0 or 1 or 2:')
	
		return int(guess) #note why retrun has int(guess) and why in while loop we have list in string because input will always have 
			receive it as string
			     			
	def check_guess(result, guess)
		if result[guess] = 'O':		
			print('Correct')
		else:
			print('wrong')
			print(result)
			
In program function will be called at top and logic will be written at the bottom

#Initiate list
mylist = ['','0','']

#Shuffle the list
shuffle = shuffle_list(mylist)

#Take player Guess
guess = player_guess()

#Check the guess
check = check_guess(shuffle, guess)


args and kwargs i.e *args and **kwargs
--------------------------------------

*args - holds values as tuple 
**kwargs - Holds values as dictonary

when we keep given arguments more than the given value, then it will be the type error in order to over come this it was introduced

def myfunc(*args)
	sum(args) * 0.05
	
myfunc(10,30,50,60,70,80) # prints sum of given value and 5% of it 
myfunc()

def myfunc(**kwargs):
	if 'fruit' in kwargs:
		print('i want to have {}'.format(kwargs['fruit']))
	else:
		print('i dont not find fruit')
myfunc(fruit = 'apple')	
    			

def myfunc(*args, **kawargs):    			
	print('I would like to have {} {}'. format(args[0],kwargs['food']))
	
myfunc(10,30,50 , fruit = 'apple', veggie = 'Carrot', food = 'egg')

if the given args and kwars are in order then parameter has to be in same order


Function Excercise with Logics
------------------------------

For loop can have break and else statement

Syntax: For x in range(3,x,2):
		conditions
		break
	else:
	    primes.append(x)
	    x +=2 
    		
To improve math and programing excercise check "euler project" website

Lambda Function
----------------
	map(function, Iteration):
		We dont have give braces in function parameter as map executes it by default
		
	Example:
		nums = [1,2,3,4,5,6]
		
		def find_even(nums):
			return nums%2 == 0
			
		map(find_even, given_list) if we run the map function it will return a memory value like "map at 0*125591654132"
						to see the output pass the map function to a iteration or list
		
		for each in map(find_even, given_list):
			print(each)

		list(map(find_even, given_list))		
	
	filter() will retrun boolean
		
		def check_even(num):
			return num%2 == 0
	
	Example:
		filter(check_even, nums) - it applies filter on the list of number parameter and return only the filtered values
						it will return "filter at 0*23264520", so pass it iterator or list
						
		for item in filter(check_even, nums)
		
		or 
		
		list(filter(check_even, nums))
						
	lamdba() anonymous function, we dont have to give name 
	
	how to change normal function to lambda expression
	
	def square(nums):
		retrun num ** 2
		
	example: 
		 lambda(num: num **2)

		using conjunction with map and filter, since lambda is anonymous function it passed as function argument to map and filter and susequently as list
			
	example:
		list(map(lambda(num: num **2), nums))
		
		list(filter(lambda(num: num **2), nums)))
		
		reverse the names
		list(lambda(x:x[::-1]), names)
		
		complex functions cannot be used as lambda expression, use it as readable function
		 
		
Nested Statement and scope
--------------------------

Variable names - Stored in namespace, it also have scope, determine visiblity 

X= 25

def printer():
	x = 50 
	return x

print(x) it will be 25 
print(printer) it will be 50

How python recognise the variable?

LEGB Rule - order python will look for variables

L - Local variable inside the function
E - Enclosing functions locals 
G - Global(module)
B - Built-in 

			   		
x = 50

def func(x):
	global x # this helps to override the varible outside variable, it better to avoid using this keyword , do the reassignment 
			We may accidently override when we have multiple functions
	print(f'x is {x}')
	
	#local reassignment
	x= 200          # has scope only to this loop
	print(f'x is {x} local')
	
    			
We can declare global if we want to overite it 
    			
    			


Accepting user input
--------------------
keyword input("Please enter a value:")
	input("Please Enter A value:")
#it displays a value as i.e return string
Please Enter A value:3

	result = input("Please Enter A value:")  			
	result
#input value stored in a variable and it will retruned as string by default

#We can change the input return type     			
#convert the result value to integer
	result_int = int(result)

#result_float
	We can convert the datatype by doing casting
	type(result_int)

    			
    			
  
    			
    			
    			
    			
    			
    			
    			
    			
    			
    			
    			
    			
    			
    			
    			
    			
    			
    			
    			
    			
    			
    			
    			
    			
    			
    			
    			
    			
		
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


		
