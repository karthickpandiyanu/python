Problem1: Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]). Return the running sum of nums.
Example
Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].

from typing import List
class SumOf1DArray:

    #Issue 1:  def sumofarray(self, nums:[int])->list[int]: #output: TypeError: 'type' object is not subscriptable
    # Solution: Note the capitalisation of List vs list. There’s a PEP for making your code work going forward, starting with Python 3.9.
    def sumofarray(self, nums:List[int])->List[int]:
        finalresult =[]
        temp = 0
        #Issue2: lenoflist = len(nums) which is returning a int value, so we cannot call value out of integer
        for each in range(len(nums)):
            #Issue2: nums(each) List object not callable
            #Solution: changed to nums[each]
            temp = nums[each] + temp
            finalresult.append(temp)
        print(finalresult)
            #print(nums[each])
        #return nums


invk = SumOf1DArray()
invk.sumofarray([1,2,3,4])
